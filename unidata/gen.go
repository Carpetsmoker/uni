// +build go_run_only

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sort"
	"strconv"
	"strings"
	"time"

	"arp242.net/uni/unidata"
)

func main() {
	var err error
	if len(os.Args) > 1 {
		err = run(os.Args[1])
	} else {
		err = run("unidata")
		if err == nil {
			err = run("entities")
			if err == nil {
				err = run("emojidata")
			}
		}
	}
	if err != nil {
		panic(err)
	}
}

func run(which string) error {
	var err error
	switch which {
	case "unidata":
		err = mkunidata()
	case "entities":
		err = mkentities()
	case "emojidata":
		err = mkemojidata()
	default:
		err = fmt.Errorf("unknown file: %q\n", which)
	}

	return err
}

func mkemojidata() (closeErr error) {
	// modifiers = []uint32{
	// 	0x1F3FB, // 🏻 light skin tone
	// 	0x1F3FC, // 🏼 medium-light skin tone
	// 	0x1F3FD, // 🏽 medium skin tone
	// 	0x1F3FE, // 🏾 medium-dark skin tone
	// 	0x1F3FF, // 🏿 dark skin tone
	// }

	text, err := fetch("https://unicode.org/Public/emoji/latest/emoji-test.txt")
	if err != nil {
		return err
	}

	fp, err := os.Create("emoji.go")
	if err != nil {
		return err
	}
	defer func() { closeErr = fp.Close() }()

	_, err = fp.WriteString("// Code generated by gen.go; DO NOT EDIT\n\n" +
		"package unidata\n\n")
	if err != nil {
		return err
	}

	var (
		emojis          = make(map[string][]string)
		group, subgroup string
		groups          []string
		subgroups       = make(map[string][]string)
	)
	for _, line := range strings.Split(string(text), "\n") {
		// Groups are listed as a comment, but we want to preserve them.
		// # group: Smileys & Emotion
		// # subgroup: face-smiling
		if strings.HasPrefix(line, "# group: ") {
			group = line[strings.Index(line, ":")+2:]
			groups = append(groups, group)
			continue
		}
		if strings.HasPrefix(line, "# subgroup: ") {
			subgroup = line[strings.Index(line, ":")+2:]
			subgroups[group] = append(subgroups[group], subgroup)
			continue
		}

		var comment string
		if p := strings.Index(line, "#"); p > -1 {
			comment = strings.TrimSpace(line[p+1:])
			line = strings.TrimSpace(line[:p])
		}
		if len(line) == 0 {
			continue
		}

		// "only fully-qualified emoji zwj sequences should be generated by
		// keyboards and other user input devices"
		if !strings.HasSuffix(line, "; fully-qualified") {
			continue
		}

		codepoints := strings.TrimSpace(strings.Split(line, ";")[0])

		// Get the name from the comment:
		//   # 😀 E2.0 grinning face
		//   # 🦶🏿 E11.0 foot: dark skin tone
		name := strings.SplitN(comment, " ", 3)[2]

		tone := false
		var cp []string
		for _, c := range strings.Split(codepoints, " ") {
			d, err := strconv.ParseInt(string(c), 16, 64)
			if err != nil {
				return err
			}

			switch d {
			// Skin tones
			case 0x1f3fb, 0x1f3fc, 0x1f3fd, 0x1f3fe, 0x1f3ff:
				tone = true
			// ZWJ and presentation selector.
			case 0x200d, 0xfe0f:
				// No nothing
			default:
				cp = append(cp, fmt.Sprintf("0x%x", d))
			}
		}

		// This ignores combining the "holding hands" with different skin tone
		// variants:
		// 1F468 1F3FB 200D 1F91D 200D 1F468 1F3FF 👨🏻‍🤝‍👨🏿
		// E12.1 men holding hands: light skin tone, dark skin tone
		//
		// There is no good way to select this with the current UX, and to be
		// honest I don't think it's very important either.
		if tone {
			_, ok := emojis[strings.Join(cp, ", ")]
			if ok {
				emojis[strings.Join(cp, ", ")][4] = "true"
			}
			continue
		}

		emojis[strings.Join(cp, ", ")] = []string{
			strings.Join(cp, ", "), name, group, subgroup, "false"}
	}

	fp.WriteString("var Emojidata = []EmojiChar{\n")
	for _, e := range emojis {
		_, err = fp.WriteString(fmt.Sprintf("\t{[]uint32{%s}, `%s`, `%s`, `%s`, %s},\n",
			e[0], e[1], e[2], e[3], e[4]))
		if err != nil {
			return err
		}
	}

	_, err = fp.WriteString("}\n\n")
	if err != nil {
		return err
	}

	fmt.Fprintf(fp, "var EmojiGroups = %#v\n\n", groups)
	fmt.Fprintf(fp, "var EmojiSubgroups = %#v\n\n", subgroups)

	return closeErr
}

// http://www.unicode.org/reports/tr44/
func mkunidata() (closeErr error) {
	text, err := fetch("https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt")
	if err != nil {
		return err
	}

	widths, err := loadwidths()
	if err != nil {
		return err
	}

	fp, err := os.Create("unidata.go")
	if err != nil {
		return err
	}
	defer func() { closeErr = fp.Close() }()

	_, err = fp.WriteString("// Code generated by gen.go; DO NOT EDIT\n\n" +
		"package unidata\n\n" +
		"var Unidata = map[string]Char{\n")
	if err != nil {
		return err
	}

	for _, line := range bytes.Split(text, []byte("\n")) {
		if p := bytes.Index(line, []byte("#")); p > -1 {
			line = bytes.TrimSpace(line[:p])
		}
		if len(line) == 0 {
			continue
		}

		s := bytes.Split(line, []byte(";"))
		// Some properties (most notably control characters) all have the name
		// as <control>, which isn't very useful. The old (obsolete) Unicode 1
		// name field has a more useful name.
		// TODO: add this information from:
		// https://www.unicode.org/Public/UCD/latest/ucd/NamesList.txt
		name := s[1]
		if name[0] == '<' && len(s[10]) > 1 {
			name = s[10]
		}

		cp, err := strconv.ParseUint(string(s[0]), 16, 32)
		if err != nil {
			return err
		}

		_, err = fp.WriteString(fmt.Sprintf("\t\"%s\": {%d, %d, 0x%x, \"%s\"},\n",
			s[0], widths[cp], unidata.Catmap[string(s[2])], cp, name))
		if err != nil {
			return err
		}
	}

	_, err = fp.WriteString("}\n")
	if err != nil {
		return err
	}

	return closeErr
}

func loadwidths() (map[uint64]uint8, error) {
	text, err := fetch("http://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt")
	if err != nil {
		return nil, err
	}

	widths := make(map[uint64]uint8)
	for _, line := range bytes.Split(text, []byte("\n")) {
		if p := bytes.Index(line, []byte("#")); p > -1 {
			line = bytes.TrimSpace(line[:p])
		}
		if len(line) == 0 {
			continue
		}

		s := bytes.Split(line, []byte(";"))
		width := getwidth(string(s[1]))

		// Single codepoint.
		if !bytes.Contains(s[0], []byte("..")) {
			cp, err := strconv.ParseUint(string(s[0]), 16, 32)
			if err != nil {
				return nil, err
			}
			widths[cp] = width
			continue
		}

		rng := bytes.Split(s[0], []byte(".."))
		start, err := strconv.ParseUint(string(rng[0]), 16, 32)
		if err != nil {
			return nil, err
		}
		end, err := strconv.ParseUint(string(rng[1]), 16, 32)
		if err != nil {
			return nil, err
		}

		for cp := start; end >= cp; cp++ {
			widths[cp] = width
		}
	}

	return widths, nil
}

func getwidth(w string) uint8 {
	switch w {
	case "A":
		return unidata.WidthAmbiguous
	case "F":
		return unidata.WidthFullWidth
	case "H":
		return unidata.WidthHalfWidth
	case "N":
		return unidata.WidthNarrow
	case "Na":
		return unidata.WidthNeutral
	case "W":
		return unidata.WidthWide
	default:
		panic("wtf") // Never happens
	}
}

func mkentities() (closeErr error) {
	j, err := fetch("https://html.spec.whatwg.org/entities.json")
	if err != nil {
		return err
	}

	var out map[string]struct {
		Codepoints []uint32 `json:"codepoints"`
	}
	err = json.Unmarshal(j, &out)
	if err != nil {
		return err
	}

	fp, err := os.Create("entities.go")
	if err != nil {
		return err
	}
	defer func() { closeErr = fp.Close() }()

	_, err = fp.WriteString("// Code generated by gen.go; DO NOT EDIT\n\n" +
		"package unidata\n\n" +
		"var Entities = map[rune]string{\n")
	if err != nil {
		return err
	}

	sorted := []string{}
	for k, _ := range out {
		// Backwards-compatible versions without closing ;
		if !strings.HasSuffix(k, ";") {
			continue
		}

		sorted = append(sorted, k)
	}

	// We want the shortest (&nbsp; instead of &NonBreakingSpace;).
	sort.Slice(sorted, func(i, j int) bool {
		return len(sorted[i]) < len(sorted[j])
	})

	var seen []uint32
	for _, ent := range sorted {
		cp := out[ent].Codepoints

		// TODO: some entities represent two codepoints; for example
		// &NotEqualTilde; is U+02242 (MINUS TILDE) plus U+000338 (COMBINING
		// LONG SOLIDUS OVERLAY).
		// I can't be bothered to implement this right now.
		if len(cp) != 1 {
			continue
		}

		found := false
		for _, s := range seen {
			if cp[0] == s {
				found = true
				break
			}
		}
		if found {
			continue
		}

		_, err = fp.WriteString(fmt.Sprintf("\t%d: \"%s\",\n",
			cp[0], strings.Trim(ent, "&;")))
		if err != nil {
			return err
		}

		seen = append(seen, cp[0])
	}

	_, err = fp.WriteString("}\n")
	if err != nil {
		return err
	}

	return closeErr
}

// Load .cache/file if it exists, or fetch from URL and store in .cache if it
// doesn't.
func fetch(url string) ([]byte, error) {
	file := "./.cache/" + path.Base(url)
	if _, err := os.Stat(file); err == nil {
		return ioutil.ReadFile(file)
	}

	client := http.Client{Timeout: 60 * time.Second}
	resp, err := client.Get(url)
	if err != nil {
		return nil, fmt.Errorf("cannot download %q: %s", url, err)
	}
	defer resp.Body.Close()

	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("cannot read body of %q: %s", url, err)
	}

	if resp.StatusCode != http.StatusOK {
		return data, fmt.Errorf("unexpected status code %d %s for %q",
			resp.StatusCode, resp.Status, url)
	}

	err = ioutil.WriteFile(file, data, 0666)
	if err != nil {
		return nil, fmt.Errorf("could not write cache: %s", err)
	}

	return data, nil
}
